# --- Python backend ignores ---
__pycache__/
*.py[cod]
*.pyo
*.pyd
*.pyc
*.egg-info/
.env
venv/
env/
ENV/
*.sqlite3
*.log
*.db

# Alembic caches
backend/alembic/**/__pycache__/

# --- Node/React frontend ignores ---
node_modules/
dist/
build/
*.log
.env*
frontend/.vite/
frontend/.cache/

# --- Docker / general ---
*.swp
*.bak
*.tmp
*.orig
*.rej

# Editor/IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Git
.git/

*.Zone.Identifier


# Ignore unsealed secrets
**/*-secret.yaml

# But keep sealed secrets
!**/sealed-*-secret.yaml

# --- Terraform ignores ------- #

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
.deploy.env
